/**
 * 
 *
 */

import java.awt.*;
import java.util.*;
import java.io.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.table.*;
import javax.swing.border.*;
import engineInterface.*;

/**
 * A basic JFC 1.1 based application.
 */
public class PEOS_EI extends javax.swing.JFrame
{
	public final static String appTitle = new String("PEOS Enactment Interface");

    final static String   SYS_EXEC_COMMAND = new String("Command");
    final static String   SYS_EXEC_SCRIPT = new String("Script");
    
	
	final static int BA_connect = 0;
	final static int BA_disconnect = 1;
	final static int BA_focusNone  = 2;
	final static int BA_focusTree  = 3;
	final static int BA_focusTable = 4;

	final static int SLEEP_INTERVAL = 10;		// 10 milisec.

	private int	            buttonAccess;
   	private PEOS_Interface  _PEOSInterface;
    private	Hashtable       lastRetValue;

	public PEOS_EI()
	{
	    buttonAccess = BA_disconnect;
	    _PEOSInterface = null;
	    lastRetValue = null;
	    
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		setTitle(appTitle);
		setJMenuBar(JPEOSMenuBar);
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(776,578);
		setVisible(false);
		JPanel1.setBorder(bevelBorder1);
		JPanel1.setOpaque(false);
		JPanel1.setLayout(null);
		getContentPane().add(BorderLayout.CENTER, JPanel1);
		JPanel1.setBounds(0,0,776,578);
		JPanel2.setBorder(bevelBorder2);
		JPanel2.setLayout(null);
		JPanel1.add(JPanel2);
		JPanel2.setBounds(12,76,348,488);
		JScrollPane1.setBorder(bevelBorder2);
		JScrollPane1.setOpaque(true);
		JPanel2.add(JScrollPane1);
		JScrollPane1.setBounds(12,24,324,120);
		JScrollPane1.getViewport().add(JTaskTable);
		JTaskTable.setBackground(java.awt.Color.white);
		JTaskTable.setBounds(0,0,320,34);
		JScrollPane2.setBorder(bevelBorder2);
		JScrollPane2.setOpaque(true);
		JPanel2.add(JScrollPane2);
		JScrollPane2.setBounds(12,168,324,260);
		JProcessesTree.setBorder(bevelBorder2);
		JScrollPane2.getViewport().add(JProcessesTree);
//		JProcessesTree.setBackground(java.awt.Color.getTransparency());
		JProcessesTree.setBounds(0,0,320,256);
		JLabel1.setText("Active Tasks");
		JPanel2.add(JLabel1);
		JLabel1.setBounds(12,0,132,22);
		JLabel2.setText("Available Tasks");
		JPanel2.add(JLabel2);
		JLabel2.setBounds(12,144,132,22);
		JPanel5.setBorder(emptyBorder1);
		JPanel5.setOpaque(false);
		JPanel5.setLayout(null);
		JPanel2.add(JPanel5);
		JPanel5.setBounds(0,428,345,60);
		JPanel4.setBorder(emptyBorder1);
		JPanel4.setLayout(null);
		JPanel5.add(JPanel4);
		JPanel4.setBounds(213,15,110,31);
		JRunButton.setToolTipText("Run Task");
		JRunButton.setBorder(bevelBorder1);
		JRunButton.setActionCommand("Run Task");
		JRunButton.setMnemonic((int)'R');
		JRunButton.setEnabled(false);
		JPanel4.add(JRunButton);
		JRunButton.setBounds(2,0,35,31);
		JSuspendButton.setToolTipText("Suspend Task");
		JSuspendButton.setBorder(bevelBorder1);
		JSuspendButton.setActionCommand("Suspend Task");
		JSuspendButton.setMnemonic((int)'S');
		JSuspendButton.setEnabled(false);
		JPanel4.add(JSuspendButton);
		JSuspendButton.setBounds(38,0,35,31);
		JResumeButton.setToolTipText("Resume Task");
		JResumeButton.setBorder(bevelBorder1);
		JResumeButton.setActionCommand("Resume Task");
		JResumeButton.setMnemonic((int)'T');
		JResumeButton.setEnabled(false);
		JPanel4.add(JResumeButton);
		JResumeButton.setBounds(73,0,35,31);
		JStepRunRadioButton.setText("Single Step");
		JStepRunRadioButton.setActionCommand("Single Step");
		JStepRunRadioButton.setSelected(true);
		JStepRunRadioButton.setBounds(12,8,108,20);
		JPanel5.add(JStepRunRadioButton);
		ButtonGroup1.add(JStepRunRadioButton);
		JAutoRunRadioButton.setText("Auto Run");
		JAutoRunRadioButton.setActionCommand("Auto Run");
		JAutoRunRadioButton.setSelected(false);
		JAutoRunRadioButton.setBounds(12,30,180,20);
		ButtonGroup1.add(JAutoRunRadioButton);
		JPanel5.add(JAutoRunRadioButton);
		JPanel6.setBorder(bevelBorder2);
		JPanel6.setOpaque(false);
		JPanel6.setLayout(null);
		JPanel1.add(JPanel6);
		JPanel6.setBounds(368,12,396,552);
		JTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
		JTabbedPane1.setBorder(bevelBorder2);
		JPanel6.add(JTabbedPane1);
		JTabbedPane1.setBounds(0,0,396,552);

		JPanel3.setLayout(null);
		JTabbedPane1.add(JPanel3);
		JPanel3.setBounds(4,4,387,518);
		JPanel3.setVisible(false);
		JScrollPane3.setBorder(bevelBorder2);
		JScrollPane3.setOpaque(true);
		JPanel3.add(JScrollPane3);
		JScrollPane3.setBounds(10,34,368,154);
		JScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		JCurrentExecTextArea.setBorder(emptyBorder1);
		JScrollPane3.getViewport().add(JCurrentExecTextArea);
		JCurrentExecTextArea.setBounds(0,0,364,154);
		JCurrentExecTextArea.setLineWrap(true);
		JCurrentExecTextArea.setTabSize(4);
		JCurrentExecTextArea.setEditable(false);
		JProcExecLabel.setText("Selected Process");
		JPanel3.add(JProcExecLabel);
		JProcExecLabel.setBounds(10,10,132,20);
		JLabel3.setText("Finished or Branched Processes");
		JPanel3.add(JLabel3);
		JLabel3.setBounds(10,200,314,24);
		JScrollPane4.setBorder(bevelBorder2);
		JScrollPane4.setOpaque(true);
		JPanel3.add(JScrollPane4);
		JScrollPane4.setBounds(10,224,368,284);
		JScrollPane4.getViewport().add(JFinishTable);
		JFinishTable.setBounds(0,0,364,17);

		JPanel9.setLayout(null);
		JTabbedPane1.add(JPanel9);
		JPanel9.setBounds(4,4,387,518);
		JPanel9.setVisible(false);
		JScrollPane5.setBorder(bevelBorder2);
		JScrollPane5.setOpaque(true);
		JPanel9.add(JScrollPane5);
		JScrollPane5.setBounds(6,6,375,89);
		JScrollPane5.setVisible(true);
		JScrollPane5.getViewport().add(JScriptTable);
		JScriptTable.setBounds(0,0,371,34);
		JScriptTable.setVisible(true);
		JLabel13.setText("No Script or Command Line.");
		JPanel9.add(JLabel13);
		JLabel13.setBounds(6,104,314,24);
		JPanel9.add(JScrollPane7);
		JScrollPane7.setBounds(6,128,375,382);
		JScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		JScrptTextArea.setBorder(emptyBorder1);
		JScrollPane7.getViewport().add(JScrptTextArea);
		JScrptTextArea.setBounds(0,0,371,382);
		JScrptTextArea.setLineWrap(true);
		JScrptTextArea.setTabSize(4);
		JScrptTextArea.setEditable(false);
		JScrptTextArea.setVisible(false);

		JPanel9.add(JScrollPane8);
		JScrollPane8.setBounds(6,128,375,80);
		JScrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		JCommandTextArea.setBorder(emptyBorder1);
		JScrollPane8.getViewport().add(JCommandTextArea);
		JCommandTextArea.setBounds(0,0,371,80);
		JCommandTextArea.setLineWrap(true);
		JCommandTextArea.setTabSize(4);
		JCommandTextArea.setEditable(false);
		JCommandTextArea.setVisible(false);
		JLabel14.setText("Description:");
		JPanel9.add(JLabel14);
		JLabel14.setBounds(6,210,314,24);
		JLabel14.setVisible(false);
		JPanel9.add(JScrollPane9);
		JScrollPane9.setBounds(6,234,375,276);
		JScrollPane9.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		JDescptTextArea.setBorder(emptyBorder1);
		JScrollPane9.getViewport().add(JDescptTextArea);
		JDescptTextArea.setBounds(0,0,371,276);
		JDescptTextArea.setLineWrap(true);
		JDescptTextArea.setWrapStyleWord(true);
		JDescptTextArea.setTabSize(4);
		JDescptTextArea.setEditable(false);
		JDescptTextArea.setVisible(false);

		JTabbedPane1.setSelectedComponent(JPanel3);
		JTabbedPane1.setSelectedIndex(1);
		JTabbedPane1.setTitleAt(1,"Process Properties");
		JTabbedPane1.setTitleAt(0,"Execution Information");
		JPanel7.setBorder(bevelBorder2);
		JPanel7.setLayout(null);
		JPanel1.add(JPanel7);
		JPanel7.setBounds(12,12,348,60);
		JModelListCB.setEnabled(false);
		JPanel7.add(JModelListCB);
		JModelListCB.setBounds(12,24,216,24);
		JLabel4.setText("Available Processes");
		JPanel7.add(JLabel4);
		JLabel4.setBounds(12,0,156,22);
		JPanel8.setBorder(emptyBorder1);
		JPanel8.setLayout(null);
		JPanel7.add(JPanel8);
		JPanel8.setBounds(250,19,71,28);
		JCreateButton.setToolTipText("Create Process Instance");
		JCreateButton.setBorder(bevelBorder1);
		JCreateButton.setActionCommand("Create Process");
		JCreateButton.setMnemonic((int)'C');
		JPanel8.add(JCreateButton);
		JCreateButton.setBounds(0,0,35,28);
		JCreateButton.setToolTipText("Create Process Instance");
		JCreateButton.setEnabled(false);
		JRefreshButton.setBorder(bevelBorder1);
		JRefreshButton.setActionCommand("Refresh");
		JRefreshButton.setMnemonic((int)'F');
		JRefreshButton.setToolTipText("Refresh Process List");
		JPanel8.add(JRefreshButton);
		JRefreshButton.setBounds(36,0,35,28);
		JRefreshButton.setEnabled(false);
		//$$ JPEOSMenuBar.move(180,588);
		connectionMenu.setText("Connection");
		connectionMenu.setActionCommand("Connection");
		connectionMenu.setMnemonic((int)'C');
		JPEOSMenuBar.add(connectionMenu);
		JConnectMenuItem.setText("Connect");
		JConnectMenuItem.setActionCommand("Connect");
		JConnectMenuItem.setMnemonic((int)'C');
		connectionMenu.add(JConnectMenuItem);
		JDisconnectMenuItem.setText("Disconnect");
		JDisconnectMenuItem.setActionCommand("Disconnect");
		JDisconnectMenuItem.setMnemonic((int)'D');
		JDisconnectMenuItem.setEnabled(false);
		connectionMenu.add(JDisconnectMenuItem);
		connectionMenu.add(JSeparator1);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		exitItem.setMnemonic((int)'X');
		connectionMenu.add(exitItem);
		actionMenu.setText("Action");
		actionMenu.setActionCommand("Action");
		actionMenu.setMnemonic((int)'A');
		JPEOSMenuBar.add(actionMenu);
		JCreateMenuItem.setText("Create Process Instance");
		JCreateMenuItem.setActionCommand("Create Process");
		JCreateMenuItem.setMnemonic((int)'C');
		actionMenu.add(JCreateMenuItem);
		JRefreshMenuItem.setText("Refresh Process List");
		JRefreshMenuItem.setActionCommand("Refresh");
		JRefreshMenuItem.setMnemonic((int)'F');
		actionMenu.add(JRefreshMenuItem);
		actionMenu.add(JSeparator2);
		JRunMenuItem.setEnabled(false);
		JRunMenuItem.setText("Run Task");
		JRunMenuItem.setActionCommand("Run  Task");
		JRunMenuItem.setMnemonic((int)'R');
		actionMenu.add(JRunMenuItem);
		actionMenu.add(JSeparator3);
		JDoneMenuItem.setEnabled(false);
		JDoneMenuItem.setText("Done Task");
		JDoneMenuItem.setActionCommand("Done Task");
		JDoneMenuItem.setMnemonic((int)'D');
		actionMenu.add(JDoneMenuItem);
		JSuspendMenuItem.setEnabled(false);
		JSuspendMenuItem.setText("Suspend Task");
		JSuspendMenuItem.setActionCommand("Suspend Task");
		JSuspendMenuItem.setMnemonic((int)'S');
		actionMenu.add(JSuspendMenuItem);
		JResumeMenuItem.setEnabled(false);
		JResumeMenuItem.setText("Resume Task");
		JResumeMenuItem.setActionCommand("Resume Task");
		JResumeMenuItem.setMnemonic((int)'T');
		actionMenu.add(JResumeMenuItem);
		actionMenu.setEnabled(false);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		helpMenu.setMnemonic((int)'H');
		JPEOSMenuBar.add(helpMenu);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		aboutItem.setMnemonic((int)'A');
		helpMenu.add(aboutItem);
		//$$ bevelBorder1.move(204,588);
		//$$ titledBorder1.move(372,588);
		//$$ bevelBorder2.move(396,588);
		//$$ emptyBorder1.move(420,588);
		//$$ lineBorder1.move(444,588);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);

		JConnectMenuItem.addActionListener(lSymAction);
		JDisconnectMenuItem.addActionListener(lSymAction);
		JCreateMenuItem.addActionListener(lSymAction);
		JRefreshMenuItem.addActionListener(lSymAction);
		JRunMenuItem.addActionListener(lSymAction);
		JDoneMenuItem.addActionListener(lSymAction);
		JSuspendMenuItem.addActionListener(lSymAction);
		JResumeMenuItem.addActionListener(lSymAction);

		JCreateButton.addActionListener(lSymAction);
		JRefreshButton.addActionListener(lSymAction);
		JResumeButton.addActionListener(lSymAction);
		JSuspendButton.addActionListener(lSymAction);
		JRunButton.addActionListener(lSymAction);

		SymFocus aSymFocus = new SymFocus();
		JProcessesTree.addFocusListener(aSymFocus);
		JTaskTable.addFocusListener(aSymFocus);

		SymTreeSelection lSymTreeSelection = new SymTreeSelection();
		JProcessesTree.addTreeSelectionListener(lSymTreeSelection);

		SymTableSelection lSymTableSelection = new SymTableSelection();
		JTaskTable.getSelectionModel().addListSelectionListener(lSymTableSelection);

		SymMouse aSymMouse = new SymMouse();
		JTaskTable.addMouseListener(aSymMouse);
		JProcessesTree.addMouseListener(aSymMouse);
		JModelListCB.addMouseListener(aSymMouse);

		//}}

	    JModelListCB.setModel(comboBoxModelProcess);
    
		Icon icon = new ImageIcon("images/create_up.gif", "Normal Create");
		JCreateButton.setIcon(icon);
		icon = new ImageIcon("images/create_down.gif", "Pressed Create");
		JCreateButton.setPressedIcon(icon);
		icon = new ImageIcon("images/create_gray.gif", "Disable Create");
		JCreateButton.setDisabledIcon(icon);
		icon = new ImageIcon("images/refresh_up.gif", "Normal Refresh");
		JRefreshButton.setIcon(icon);
		icon = new ImageIcon("images/refresh_down.gif", "Pressed Refresh");
		JRefreshButton.setPressedIcon(icon);
		icon = new ImageIcon("images/refresh_gray.gif", "Disable Refresh");
		JRefreshButton.setDisabledIcon(icon);
		icon = new ImageIcon("images/runButton_up.gif", "Normal Run");
		JRunButton.setIcon(icon);
		icon = new ImageIcon("images/runButton_down.gif", "Pressed Run");
		JRunButton.setPressedIcon(icon);
		icon = new ImageIcon("images/runButton_gray.gif", "Disable Run");
		JRunButton.setDisabledIcon(icon);
		icon = new ImageIcon("images/suspendButton_up.gif", "Normal Suspend");
		JSuspendButton.setIcon(icon);
		icon = new ImageIcon("images/suspendButton_donw.gif", "Pressed Suspend");
		JSuspendButton.setPressedIcon(icon);
		icon = new ImageIcon("images/suspendButton_gray.gif", "Disable Suspend");
		JSuspendButton.setDisabledIcon(icon);
		icon = new ImageIcon("images/resumeButton_up.gif", "Normal Done");
		JResumeButton.setIcon(icon);
		icon = new ImageIcon("images/resumeButton_down.gif", "Pressed Done");
		JResumeButton.setPressedIcon(icon);
		icon = new ImageIcon("images/resumeButton_gray.gif", "Disable Done");
		JResumeButton.setDisabledIcon(icon);

/*		JCreateButton.setIcon(loadImageIcon("images/create_up.gif", "Normal Create"));
		JCreateButton.setPressedIcon(loadImageIcon("images/create_down.gif", "Pressed Create"));
		JCreateButton.setDisabledIcon(loadImageIcon("images/create_gray.gif", "Disable Create"));
		JRefreshButton.setIcon(loadImageIcon("images/refresh_up.gif", "Normal Refresh"));
		JRefreshButton.setPressedIcon(loadImageIcon("images/refresh_down.gif", "Pressed Refresh"));
		JRefreshButton.setDisabledIcon(loadImageIcon("images/refresh_gray.gif", "Disable Refresh"));
		JRunButton.setIcon(loadImageIcon("images/runButton_up.gif", "Normal Run"));
		JRunButton.setPressedIcon(loadImageIcon("images/runButton_down.gif", "Pressed Run"));
		JRunButton.setDisabledIcon(loadImageIcon("images/runButton_gray.gif", "Disable Run"));
		JSuspendButton.setIcon(loadImageIcon("images/suspendButton_up.gif", "Normal Suspend"));
		JSuspendButton.setPressedIcon(loadImageIcon("images/suspendButton_donw.gif", "Pressed Suspend"));
		JSuspendButton.setDisabledIcon(loadImageIcon("images/suspendButton_gray.gif", "Disable Suspend"));
		JResumeButton.setIcon(loadImageIcon("images/resumeButton_up.gif", "Normal Done"));
		JResumeButton.setPressedIcon(loadImageIcon("images/resumeButton_down.gif", "Pressed Done"));
		JResumeButton.setDisabledIcon(loadImageIcon("images/resumeButton_gray.gif", "Disable Done"));
	    JProcessesTree.setRootVisible(false);
	    JProcessesTree.setShowsRootHandles(true);	*/
	}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new JFrame1 and makes it visible.
	 */
	static public void main(String args[])
	{
		try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    /*
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }
		    */

			//Create a new instance of our application's frame, and make it visible.
			PEOS_EI peos = new PEOS_EI();
			peos.invokeLogin();
			peos.setVisible(true);
		} 
		catch (Throwable t) {
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JScrollPane JScrollPane2 = new javax.swing.JScrollPane();
//	javax.swing.JTree JProcessesTree = new javax.swing.JTree();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JPanel JPanel5 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel4 = new javax.swing.JPanel();
	javax.swing.JButton JRunButton = new javax.swing.JButton();
	javax.swing.JButton JSuspendButton = new javax.swing.JButton();
	javax.swing.JButton JResumeButton = new javax.swing.JButton();
	javax.swing.ButtonGroup ButtonGroup1 = new javax.swing.ButtonGroup();
	javax.swing.JRadioButton JStepRunRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton JAutoRunRadioButton = new javax.swing.JRadioButton();
	javax.swing.JPanel JPanel6 = new javax.swing.JPanel();
	javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();
	javax.swing.JPanel JPanel3 = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane3 = new javax.swing.JScrollPane();
	javax.swing.JTextArea JCurrentExecTextArea = new javax.swing.JTextArea();
	javax.swing.JTextArea JScrptTextArea = new javax.swing.JTextArea();
	javax.swing.JTextArea JCommandTextArea = new javax.swing.JTextArea();
	javax.swing.JTextArea JDescptTextArea = new javax.swing.JTextArea();
	javax.swing.JLabel JProcExecLabel = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel13 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel14 = new javax.swing.JLabel();
	javax.swing.JScrollPane JScrollPane4 = new javax.swing.JScrollPane();
	javax.swing.JScrollPane JScrollPane5 = new javax.swing.JScrollPane();
	javax.swing.JScrollPane JScrollPane7 = new javax.swing.JScrollPane();
	javax.swing.JScrollPane JScrollPane8 = new javax.swing.JScrollPane();
	javax.swing.JScrollPane JScrollPane9 = new javax.swing.JScrollPane();
	javax.swing.JPanel JPanel7 = new javax.swing.JPanel();
	javax.swing.JComboBox JModelListCB = new javax.swing.JComboBox();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JPanel JPanel8 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel9 = new javax.swing.JPanel();
	javax.swing.JButton JCreateButton = new javax.swing.JButton();
	javax.swing.JButton JRefreshButton = new javax.swing.JButton();
	javax.swing.JMenuBar JPEOSMenuBar = new javax.swing.JMenuBar();
	javax.swing.JMenu connectionMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem JConnectMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JDisconnectMenuItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JMenu actionMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem JCreateMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JRefreshMenuItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator2 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JRunMenuItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator3 = new javax.swing.JSeparator();
	javax.swing.JMenuItem JDoneMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JSuspendMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem JResumeMenuItem = new javax.swing.JMenuItem();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem aboutItem = new javax.swing.JMenuItem();
	
	javax.swing.border.TitledBorder titledBorder1 = BorderFactory.createTitledBorder(LineBorder.createBlackLineBorder(), "Task Execution");
	javax.swing.border.Border bevelBorder1   = BorderFactory.createRaisedBevelBorder();
	javax.swing.border.Border bevelBorder2   = BorderFactory.createLoweredBevelBorder();
	javax.swing.border.Border emptyBorder1   = BorderFactory.createEmptyBorder();
	javax.swing.border.Border lineBorder1    = BorderFactory.createLineBorder(Color.black, 2);
	
	//}}

	JPEOSTree JProcessesTree = new JPEOSTree();
	PEOSComboBoxModel comboBoxModelProcess = new PEOSComboBoxModel();
	JPEOSTaskTable   JTaskTable   = new JPEOSTaskTable();
	JPEOSFinishTable JFinishTable = new JPEOSFinishTable();
	JPEOSScriptTable JScriptTable = new JPEOSScriptTable();
	JLoginDialog dlg = new JLoginDialog();

	private String lastPropertyProcess = new String();
	private Properties execPath = new Properties();
    private String    lastProcProperty = new String();


	//{{DECLARE_MENUS
	//}}

	void exitApplication()
	{
		try {
	    	// Beep
	    	Toolkit.getDefaultToolkit().beep();
	    	// Show a confirmation dialog
	    	int reply = JOptionPane.showConfirmDialog(this, 
	    	                                          "Do you really want to exit?", 
	    	                                          appTitle + " - Exit" , 
	    	                                          JOptionPane.YES_NO_OPTION, 
	    	                                          JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION)
			{
		    	this.setVisible(false);    // hide the Frame
		    	this.dispose();            // free the system resources
		    	System.exit(0);            // close the application
			}
		} catch (Exception e) {
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PEOS_EI.this)
				PEOS_EI_windowClosing(event);
		}
	}

	void PEOS_EI_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		PEOS_EI_windowClosing_Interaction1(event);
	}

	void PEOS_EI_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
		    if (_PEOSInterface != null)
    			_PEOSInterface.disconnect();
			this.exitApplication();
		} catch (Exception e) {
//			showException(e, "Close window");
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			//connection menu			
			if (object == JConnectMenuItem)
				JConnectMenuItem_actionPerformed(event);
			else if (object == JDisconnectMenuItem)
				JDisconnectMenuItem_actionPerformed(event);
			else if (object == exitItem)
				exitItem_actionPerformed(event);
			// action menu
			else if (object == JCreateMenuItem)
				JCreateMenuItem_actionPerformed(event);
			else if (object == JRefreshMenuItem)
				JRefreshMenuItem_actionPerformed(event);
			else if (object == JRunMenuItem)
				JRunMenuItem_actionPerformed(event);
			else if (object == JDoneMenuItem)
				JDoneMenuItem_actionPerformed(event);
			else if (object == JSuspendMenuItem)
				JSuspendMenuItem_actionPerformed(event);
			else if (object == JResumeMenuItem)
				JResumeMenuItem_actionPerformed(event);
			// help menu
			else if (object == helpMenu)
				helpMenu_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);

			// bottuns
			else if (object == JCreateButton)
				JCreateButton_actionPerformed(event);
			else if (object == JRefreshButton)
				JRefreshButton_actionPerformed(event);
			else if (object == JResumeButton)
				JResumeButton_actionPerformed(event);
			else if (object == JSuspendButton)
				JSuspendButton_actionPerformed(event);
			else if (object == JRunButton)
				JRunButton_actionPerformed(event);
		}		
	}

	//
	// Connection menu
	//
	void JConnectMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JConnectMenuItem_actionPerformed_Interaction1(event);
	}

	void JConnectMenuItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		invokeLogin();
	}

	void JDisconnectMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			_PEOSInterface.disconnect();
			lostConnection();
		} catch (Exception e) {
			showException(e, "Disconnect");
		}
	}

	void exitItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitItem_actionPerformed_Interaction1(event);
	}

	void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
		    if (_PEOSInterface != null)
    			_PEOSInterface.disconnect();
			this.exitApplication();
		} catch (Exception e) {
//			showException(e, "Disconnect");
		}
	}

	//
	// Action menu and button
	//
	void JCreateMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JCreateMenuItem_actionPerformed_Interaction1(event);
	}
	void JRefreshMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JRefreshMenuItem_actionPerformed_Interaction1(event);
	}
	void JRunMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JRunItem_actionPerformed_Interaction1(event);
	}
	void JDoneMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JDoneItem_actionPerformed_Interaction1(event);
	}
	void JSuspendMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JSuspendItem_actionPerformed_Interaction1(event);
	}
	void JResumeMenuItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		JResumeItem_actionPerformed_Interaction1(event);
	}

	void JCreateButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		JCreateMenuItem_actionPerformed_Interaction1(event);
	}
	void JRefreshButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		JRefreshMenuItem_actionPerformed_Interaction1(event);
	}
	void JRunButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (JProcessesTree.hasFocus() || (buttonAccess == BA_focusTree))
		{
			buttonAccess = BA_focusTree;
			JRunItem_actionPerformed_Interaction1(event);
		}
		else if (JTaskTable.hasFocus() || (buttonAccess == BA_focusTable))
		{
			buttonAccess = BA_focusTable;
			JDoneItem_actionPerformed_Interaction1(event);
		}
	}
	void JResumeButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		JResumeItem_actionPerformed_Interaction1(event);
	}
	void JSuspendButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		JSuspendItem_actionPerformed_Interaction1(event);
	}

	void JCreateMenuItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			lastRetValue = _PEOSInterface.PEOS_execModel((String) comboBoxModelProcess.getSelectedItem());
			lastProcProperty = "";
			displayLists(lastRetValue);
		
		} catch (java.io.IOException ioe) {
			showException(ioe, "Create a process");
			lostConnection();
		} catch (java.lang.Exception e) {
			showException(e, "Create a process");
		}
	}

	void JRefreshMenuItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		UpdateModelList();
	}

	void JRunItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) 
	{
		try 
		{
			String ret[] = JProcessesTree.getSelected();
			if (ret != null)
			{
				execCommand(PEOS_Interface.COMMAND_RUN, ret[0], ret[1]);
			}
		} 
		catch (java.lang.Exception e) 
		{
			showException(e, PEOS_Interface.COMMAND_RUN);
		}
	}

	void JDoneItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			int idx = JTaskTable.getSelectedRow();
			if (idx >= 0)
			{
				execCommand(PEOS_Interface.COMMAND_DONE, 
						(String) JTaskTable.getValueAt(idx, 1),
						(String) JTaskTable.getValueAt(idx, 2));
			}
		} catch (Exception e) {
			showException(e, "Done");
		}
	}
	void JSuspendItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) 
	{
		try 
		{
			if (JTaskTable.isSelectedRun())
			{
				int idx = JTaskTable.getSelectedRow();
				if (idx != -1)
				{
					execCommand(PEOS_Interface.COMMAND_SUSPEND, 
										(String) JTaskTable.getValueAt(idx, 1), 
										(String) JTaskTable.getValueAt(idx, 2));
				}
			}
			else
		   		Toolkit.getDefaultToolkit().beep();
		} 
		catch (Exception e) 
		{
			showException(e, PEOS_Interface.COMMAND_SUSPEND);
		}
	}
	void JResumeItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) 
	{
		try 
		{
			if (!JTaskTable.isSelectedRun())
			{
				int idx = JTaskTable.getSelectedRow();
				execCommand(PEOS_Interface.COMMAND_RESUME,
								(String) JTaskTable.getValueAt(idx, 1), 
								(String) JTaskTable.getValueAt(idx, 2));
			}
			else
		   		Toolkit.getDefaultToolkit().beep();
		} 
		catch (Exception e) 
		{
			showException(e, PEOS_Interface.COMMAND_RESUME);
		}
	}
	//
	// Help menu
	//
	void helpMenu_actionPerformed(java.awt.event.ActionEvent event)
	{
		 
		helpItem_actionPerformed_Interaction1(event);
	}

	void helpItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			JOptionPane.showMessageDialog(this, "Not support yet.", "Help",JOptionPane.INFORMATION_MESSAGE);
		} catch (Exception e) {
			showException(e, "Help");
		}
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		 
		aboutItem_actionPerformed_Interaction1(event);
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
			showException(e, "About");
		}
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == JProcessesTree)
				JProcessesTree_focusGained(event);
			else if (object == JTaskTable)
				JTaskTable_focusGained(event);
		}
	}

	void JProcessesTree_focusGained(java.awt.event.FocusEvent event)
	{
		JTaskTable.clearSelection();
		if (JProcessesTree.setSelection())
		    adjustCommandAccess(BA_focusTree);
		else
		    adjustCommandAccess(BA_focusNone);
	}

	void JTaskTable_focusGained(java.awt.event.FocusEvent event)
	{
		if (JTaskTable.getRowCount() > 0)
			adjustCommandAccess(BA_focusTable, JTaskTable.setSelection());
		else	 
			adjustCommandAccess(BA_focusNone);
		JProcessesTree.clearSelection();
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == JTaskTable)
				JTaskTable_mouseClicked(event);
			if (object == JProcessesTree)
				JProcessesTree_mouseClicked(event);
			if (object == JModelListCB)
				JModelListCB_mouseClicked(event);
		}
	}

	void JTaskTable_mouseClicked(java.awt.event.MouseEvent event)
	{
		int selRow = JTaskTable.rowAtPoint(new Point(event.getX(), event.getY())); 
		if (selRow != -1)
		{	 
			JTaskTable.setSelection(selRow);
			if (event.getClickCount() == 1)
			{
				JTaskTable_selection();
			}
			else if (event.getClickCount() == 2)
			{
				buttonAccess = BA_focusTable;
				JRunButton.doClick(10);
			}
		}
	}

	void JProcessesTree_mouseClicked(java.awt.event.MouseEvent event)
	{
		int selRow = JProcessesTree.getRowForLocation(event.getX(), event.getY());
		if (selRow != -1)
		{	 
			TreePath selPath = JProcessesTree.getPathForLocation(event.getX(), event.getY());
			JProcessesTree.getSelectionModel().setSelectionPath(selPath);
			if (event.getClickCount() == 1)
			{
				JProcessesTree_valueChanged(null);
			}
			else if (event.getClickCount() == 2)
			{
				buttonAccess = BA_focusTree;
				JRunButton.doClick(10);
			}
		}
	}

	void JModelListCB_mouseClicked(java.awt.event.MouseEvent event)
	{
		if (event.getClickCount() == 2)
		{
			JCreateButton.doClick(10);
		}

	}

	class SymTreeSelection implements javax.swing.event.TreeSelectionListener
	{
		public void valueChanged(javax.swing.event.TreeSelectionEvent event)
		{
			Object object = event.getSource();
			if (object == JProcessesTree)
				JProcessesTree_valueChanged(event);
		}
	}

	class SymTableSelection implements javax.swing.event.ListSelectionListener
	{
		public void valueChanged(javax.swing.event.ListSelectionEvent event)
		{
			Object object = event.getSource();
		//	if (object == JTaskTable.getSelectionModel())
				JTaskTable_valueChanged(event);
		}
	}
	
	void JProcessesTree_valueChanged(javax.swing.event.TreeSelectionEvent event)
	{
		String proc[] = JProcessesTree.getSelected();
		if (proc != null)
		{
			adjustCommandAccess(BA_focusTree);
  			showProperties(proc[0], proc[1], PEOS_Interface.TL_AVAILABLE);
		}
		else
			adjustCommandAccess(BA_focusNone);
	}

    void JTaskTable_valueChanged(javax.swing.event.ListSelectionEvent event)
	{
	    if (event.getValueIsAdjusting())
	        return;

		JTaskTable_selection();
	}

	void JTaskTable_selection()
	{
		int idx = JTaskTable.getSelectedRow();
		if (idx != -1)
		{
			adjustCommandAccess(BA_focusTable, JTaskTable.isSelectedRun());
			showProperties((String) JTaskTable.getValueAt(idx, 1), 
						(String) JTaskTable.getValueAt(idx, 2), PEOS_Interface.TL_RUNNING);
		}
		else
			adjustCommandAccess(BA_focusNone);
	}

//
// User defined methods.
//

	public ImageIcon loadImageIcon(String filename, String desc)
	{
//		if (applet == null)
//		{
			return new ImageIcon(filename, desc);
/*		}
		else
		{
			URL url;
			try
			{
				url = new URL(applet.getCodeBase(), filename);
				return new ImageIcon(url, desc);
			}
			catch (MalformatedURLException e)
			{
// print error
				return null;				
			}
		}   */
	}

//
// private methods
//
	private void lostConnection()
	{
		_PEOSInterface = null;
		disableAllCommandAccess();

		comboBoxModelProcess.removeAllElements();
		JModelListCB.setEnabled(false);
		displayLists(null);
		JCurrentExecTextArea.setText("");
		JCurrentExecTextArea.updateUI();
		JTaskTable.clear();
		JFinishTable.getPEOSModel().clear();
		JScriptTable.getPEOSModel().clear();
		JScrptTextArea.setText("");
		JLabel13.setText("No Script or Command Line.");
	}

	private void UpdateModelList()
	{
		try {
			Vector models = _PEOSInterface.getModelList();
			if (models.size() > 0)
			{
				JModelListCB.setEnabled(true);
				comboBoxModelProcess.setItems(models);
				if (!comboBoxModelProcess.isEmpty())
					JModelListCB.setSelectedItem(comboBoxModelProcess.getElementAt(0));
				Dimension sz = JModelListCB.getSize();
				JModelListCB.paintImmediately(0, 0, sz.width, sz.height);
			}
			else
				JModelListCB.setEnabled(false);
			lastRetValue = _PEOSInterface.getProcState();
			displayLists(lastRetValue);
		} catch (java.io.IOException ioe) {
			showException(ioe, "UpdateModelList");
			lostConnection();
		} catch (Exception e) {
			showException(e, "UpdateModelList");
		}
	}

    void invokeLogin()
    {
        try
        {
//		    JLoginDialog dlg = new JLoginDialog();
		    dlg.setModal(true);
		    dlg.show();
		    if (!dlg._bCancel)
		    {
        	    _PEOSInterface = new PEOS_Interface(dlg.getHost(), dlg.getPort());
				_PEOSInterface.PEOS_login(dlg.getUsername(), dlg.getPassword());
				actionMenu.setEnabled(true);
				adjustCommandAccess(BA_connect);
				UpdateModelList();
		    }
		}
		catch (Exception e)
		{
			showException(e, "Login");
		}
    }

	private void showException(Exception exception, String title)
	{
		lastRetValue = null;
	   	Toolkit.getDefaultToolkit().beep();
		JOptionPane.showMessageDialog(this, exception, "Exception - "+appTitle+" in "+title,JOptionPane.ERROR_MESSAGE);
	}

//
// execution. need more work
//

	boolean useSysResource(PEOS_Process proc)
	{
	    String type = null;
		String cmd = proc.getSystemCommand();
		if (cmd == null)			
		{
			cmd = proc.getExecScript();
			type = SYS_EXEC_SCRIPT;
		}
		else
		    type = SYS_EXEC_COMMAND;
		try
		{
			if (cmd != null)
			{
			    execSysCommand sysExec = new execSysCommand(this);
			    sysExec.Exec(proc.getProcessID(), cmd, type);
		        sysExec.setModal(true);
		        sysExec.show();	
			}
		}
		catch (Exception e)		
		{
			showException(e, "useSysResource");
			cmd = null;
		}
		finally
		{
			return (cmd != null);
		}
	}

	void autoExec(String curProcID, String curTask, boolean bFirstRun)
        throws java.lang.Exception
    {
		int cur = JTabbedPane1.getSelectedIndex();
    	JTabbedPane1.setSelectedIndex(0);
		JTabbedPane1.setEnabledAt(1, false);
		JTabbedPane1.updateUI();
//		Dimension sz = JTabbedPane1.getSize();
//	    JTabbedPane1.paintImmediately(0, 0, sz.width, sz.height);

		PEOS_Process    procObj = null;
		boolean bContinue = true;
	    String  procID = new String(curProcID);
	    String  task = new String();

		while (bContinue)
		{
		    if (procObj == null)
		        task = curTask;
		    else
			    task = procObj.getTaskID();
			if (bFirstRun || procObj != null)
			{
				bFirstRun = false;
				lastRetValue = _PEOSInterface.PEOS_execTask(PEOS_Interface.COMMAND_RUN, procID, task);
				if ((procObj = foundProc(PEOS_Interface.TL_RUNNING, procID)) != null)	// in running
					useSysResource(procObj);
				else
					break;				// wrong, we lost task in running
			}
			lastRetValue = _PEOSInterface.PEOS_execTask(PEOS_Interface.COMMAND_DONE, procID, task);
			addToExecPath(procID, task);
			showProperties(procID, task, null);	
			Thread.sleep(SLEEP_INTERVAL);
			procObj = foundProc(PEOS_Interface.TL_AVAILABLE, procID);		// in avail
			bContinue = (procObj != null);
		}
		JTabbedPane1.setEnabledAt(1, true);
    	JTabbedPane1.setSelectedIndex(cur);
    	setScriptCommandProp();
	}
	
	private PEOS_Process foundProc(String key, String procID)
	{
		int count = 0;
		PEOS_Process proc = null;
		PEOS_Process retProc = null;
		Vector list = null;
		if (lastRetValue.containsKey(key))
		{
			list = (Vector) lastRetValue.get(key);
			for (int i = 0; i < list.size(); i++)
			{
				proc = (PEOS_Process) list.elementAt(i);
				if (proc.compareProcID(procID) == 0)
				{
				    retProc = proc;
					count++;
				}
			}
		}
		if (count == 1)
			return retProc;
		else
			return null;
	}

	private void execCommand(String cmd, String proc, String task)
	{
		try
		{
			lastProcProperty = "";
			if (JStepRunRadioButton.isSelected())			//single step
			{
				lastRetValue = _PEOSInterface.PEOS_execTask(cmd, proc, task);
				if (cmd.compareTo(PEOS_Interface.COMMAND_RUN) == 0)
				{
					addToExecPath(proc, task);
				    PEOS_Process procObj = foundProc(PEOS_Interface.TL_RUNNING, proc);	// in running
					if (procObj != null)
					{
					    if (useSysResource(procObj))
            				lastRetValue = _PEOSInterface.PEOS_execTask(PEOS_Interface.COMMAND_DONE, proc, task);
            		}
				}
			}
			else
				autoExec(proc, task, (cmd.compareTo(PEOS_Interface.COMMAND_RUN) == 0));
			displayLists(lastRetValue);
		} catch (java.io.IOException ioe) {
			showException(ioe, "Execute a Command");
			lostConnection();
		} catch (Exception e) {
			showException(e, "Execute a Command");
		}
	}

//
// ming need more work. move to PEOSTreeModel
//
	void parseRetValHashtable(Hashtable retVal)
	{
		Object availObj = null;
		if (retVal.containsKey(PEOS_Interface.TL_FINISHED))	// finished
		{				
			String procID = ((PEOS_Process)retVal.get(PEOS_Interface.TL_FINISHED)).getProcessID();
			movetoFinished(procID);
			JCurrentExecTextArea.setText("");
			JScriptTable.getPEOSModel().clear();
			setScriptCommandProp();
			Dimension sz = JTabbedPane1.getSize();
			JTabbedPane1.paintImmediately(0, 0, sz.width, sz.height);
		}	
		if (retVal.containsKey(PEOS_Interface.TL_AVAILABLE))	//avail
		{
			if (JProcessesTree.setItems((Vector) retVal.get(PEOS_Interface.TL_AVAILABLE)))
			{
			    adjustCommandAccess(BA_focusTree);
		    }
		}
		if (retVal.containsKey(PEOS_Interface.TL_RUNNING))	// running
		{
			if (JTaskTable.setItems((Vector) retVal.get(PEOS_Interface.TL_RUNNING)))
			{
				adjustCommandAccess(BA_focusTable, JTaskTable.isSelectedRun());
			}
		}
	}

	void displayLists(Hashtable retVal)
	{
		try
		{
			JProcessesTree.clear();
			JTaskTable.clear();
			adjustCommandAccess(BA_focusNone);
			if (retVal != null)
				parseRetValHashtable(retVal);
			JTaskTable.updateUI();
			JProcessesTree.updateUI();
		}
		catch (Exception e)
		{
			showException(e, "display return");
		}
	}

//
//
	PEOS_Process findProcinlLastRV(String key, String ProcID, String Task)
	{
		if (lastRetValue.containsKey(key))
		{
			Vector list = (Vector)lastRetValue.get(key);
			for (int i = 0; i < list.size(); i++)
			{   
			    PEOS_Process aProc = (PEOS_Process) list.elementAt(i);
				if (aProc.isSame(ProcID, Task))
				{
					return aProc;
				}
			}
		}
		return null;
	}

	void updateScriptCommandProp()
	{
		JScrollPane7.updateUI();
		JScrollPane8.updateUI();
		JScrollPane9.updateUI();
		JScrptTextArea.updateUI();
		JCommandTextArea.updateUI();
		JDescptTextArea.updateUI();
		JLabel13.updateUI();
		JLabel14.updateUI();
	}
	void setScriptCommandProp()
	{
		JScrollPane7.setVisible(false);
		JScrollPane8.setVisible(false);
		JScrollPane9.setVisible(false);
		JScrptTextArea.setVisible(false);
		JCommandTextArea.setVisible(false);
		JDescptTextArea.setVisible(false);
		JLabel13.setText("No Script or Command Line.");
		JLabel14.setVisible(false);
		updateScriptCommandProp();
	}
	void setScriptCommandProp(String script)
	{
		JScrollPane7.setVisible(true);
		JScrptTextArea.setVisible(true);
		JLabel13.setText("Executable Script:");
		JScrptTextArea.setText(script);
		JScrollPane8.setVisible(false);
		JCommandTextArea.setVisible(false);
		JScrollPane9.setVisible(false);
		JDescptTextArea.setVisible(false);
		JLabel14.setVisible(false);
		updateScriptCommandProp();
	}

	void setScriptCommandProp(String command, String desc)
	{
//		JScrollPane7.setOpaque(false);
		JScrollPane7.setVisible(false);
		JScrptTextArea.setVisible(false);
		JLabel13.setText("Command:");
		JScrollPane8.setVisible(true);
		JCommandTextArea.setVisible(true);
		JCommandTextArea.setText((command!=null)?command:new String("<none>"));
		JLabel14.setVisible(true);
		JScrollPane9.setVisible(true);
		JDescptTextArea.setVisible(true);
		JDescptTextArea.setText((desc!=null)?desc:new String("<none>"));
		updateScriptCommandProp();
	}

	void showProperties(String procID, String Task, String type)
	{
/*	    int idx = JTabbedPane1.getSelectedIndex();
	    if (idx == -1)
	        idx = 0;    */
		if (JStepRunRadioButton.isSelected())		// not autoRun
		{
			if (lastProcProperty.compareTo(procID) == 0)
				return;
			else
				lastProcProperty = procID;
		}
	        
		JCurrentExecTextArea.setText("");
		JCurrentExecTextArea.setText(procID);
		JCurrentExecTextArea.append(":\n ");

		if (execPath.containsKey(procID))
		{
			String thePath = (String) execPath.getProperty(procID);
			JCurrentExecTextArea.append(thePath);
		}
		else
			JCurrentExecTextArea.append("No information about execution path.");

		if (JTabbedPane1.isEnabledAt(1) && (lastRetValue != null) && (type != null))
		{
    		JScriptTable.getPEOSModel().clear();
			PEOS_Process theProc = findProcinlLastRV(type, procID, Task);
			if (theProc != null)
			{
				JScriptTable.setItems(theProc);
				String script = theProc.getExecScript();
				if (script == null)
				{
					String cmd = theProc.getSystemCommand();
					String desc = theProc.getSysCommandDesc();
					if ((cmd == null) && (desc == null))
						setScriptCommandProp();
					else
						setScriptCommandProp(cmd, desc);
				}
				else
					setScriptCommandProp(script);
			}
		}
		Dimension sz = JTabbedPane1.getSize();
		JTabbedPane1.paintImmediately(0, 0, sz.width, sz.height);
	}

	protected void addToExecPath(String procID, String taskID)
	{
		String thePath = null;
		if (execPath.containsKey(procID))
			thePath = new String(execPath.remove(procID) + "->" + taskID) ;
		else
			thePath = new String(taskID);
		execPath.put(procID, thePath);
	}

	protected void movetoFinished(String procID)
	{		
		if (execPath.containsKey(procID))
		{
			JFinishTable.add(procID, (String) execPath.remove(procID));
		}
	}

	private void disableAllCommandAccess()
	{
		buttonAccess = BA_disconnect;
        	JDisconnectMenuItem.setEnabled(false);
 		JConnectMenuItem.setEnabled(true);
		actionMenu.setEnabled(false);
		JRefreshButton.setEnabled(false);
		JCreateButton.setEnabled(false);
		JRunMenuItem.setEnabled(false);
		JSuspendMenuItem.setEnabled(false); 
		JDoneMenuItem.setEnabled(false);
		JResumeMenuItem.setEnabled(false);
		adjustButtons(buttonAccess);
	}
	private void adjustCommandAccess(int type)
	{
		buttonAccess = type;
		if (type < BA_focusNone)
	    	{
			boolean bVal = (type == BA_connect);
            		JDisconnectMenuItem.setEnabled(bVal);
 			JConnectMenuItem.setEnabled(!bVal);
			JRefreshButton.setEnabled(actionMenu.isEnabled());
			JCreateButton.setEnabled(actionMenu.isEnabled());
		}
		JRunMenuItem.setEnabled((type == BA_focusTree) && actionMenu.isEnabled());
		JSuspendMenuItem.setEnabled(false); 
		JDoneMenuItem.setEnabled(false);
		JResumeMenuItem.setEnabled(false);
		adjustButtons(type);
	}

	private void adjustCommandAccess(int type, boolean bRunStatus)
	{
		buttonAccess = type;
		JRunMenuItem.setEnabled(false);
		JDoneMenuItem.setEnabled(true);
		JSuspendMenuItem.setEnabled(bRunStatus);
		JResumeMenuItem.setEnabled(!bRunStatus);
		adjustButtons(type);
	}

	private void adjustButtons(int type)
	{
		JRunButton.setEnabled(false);
		if (type == BA_focusTable)
 		{
			JRunButton.setEnabled(JDoneMenuItem.isEnabled());
			JRunButton.setToolTipText("Done Task");
		}
		else
		{
			JRunButton.setEnabled(JRunMenuItem.isEnabled());
			JRunButton.setToolTipText("Run Task");
		}
		JResumeButton.setEnabled(JResumeMenuItem.isEnabled());
		JSuspendButton.setEnabled(JSuspendMenuItem.isEnabled());
	}
}

